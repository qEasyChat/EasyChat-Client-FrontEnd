//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Connection : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Connection(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Connection obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Connection() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          easy_chat_utils_apiPINVOKE.delete_Connection(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Connection(int port_number, string ip, string username) : this(easy_chat_utils_apiPINVOKE.new_Connection__SWIG_0(port_number, ip, username), true) {
    if (easy_chat_utils_apiPINVOKE.SWIGPendingException.Pending) throw easy_chat_utils_apiPINVOKE.SWIGPendingException.Retrieve();
  }

  public Connection(int port_number, string ip) : this(easy_chat_utils_apiPINVOKE.new_Connection__SWIG_1(port_number, ip), true) {
    if (easy_chat_utils_apiPINVOKE.SWIGPendingException.Pending) throw easy_chat_utils_apiPINVOKE.SWIGPendingException.Retrieve();
  }

  public Connection(int port_number) : this(easy_chat_utils_apiPINVOKE.new_Connection__SWIG_2(port_number), true) {
  }

  public Connection() : this(easy_chat_utils_apiPINVOKE.new_Connection__SWIG_3(), true) {
  }

  public string get_fixed_length_size(string message) {
    string ret = easy_chat_utils_apiPINVOKE.Connection_get_fixed_length_size(swigCPtr, message);
    if (easy_chat_utils_apiPINVOKE.SWIGPendingException.Pending) throw easy_chat_utils_apiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void send_message(string message) {
    easy_chat_utils_apiPINVOKE.Connection_send_message(swigCPtr, message);
    if (easy_chat_utils_apiPINVOKE.SWIGPendingException.Pending) throw easy_chat_utils_apiPINVOKE.SWIGPendingException.Retrieve();
  }

  public string recive_message() {
    string ret = easy_chat_utils_apiPINVOKE.Connection_recive_message(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_SOCKET get_socket() {
    SWIGTYPE_p_SOCKET ret = new SWIGTYPE_p_SOCKET(easy_chat_utils_apiPINVOKE.Connection_get_socket(swigCPtr), true);
    return ret;
  }

  public void set_socket(SWIGTYPE_p_SOCKET socket) {
    easy_chat_utils_apiPINVOKE.Connection_set_socket(swigCPtr, SWIGTYPE_p_SOCKET.getCPtr(socket));
    if (easy_chat_utils_apiPINVOKE.SWIGPendingException.Pending) throw easy_chat_utils_apiPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_port_number() {
    int ret = easy_chat_utils_apiPINVOKE.Connection_get_port_number(swigCPtr);
    return ret;
  }

  public void set_port_number(int port_number) {
    easy_chat_utils_apiPINVOKE.Connection_set_port_number(swigCPtr, port_number);
  }

  public string get_username() {
    string ret = easy_chat_utils_apiPINVOKE.Connection_get_username(swigCPtr);
    return ret;
  }

  public void set_username(string username) {
    easy_chat_utils_apiPINVOKE.Connection_set_username(swigCPtr, username);
    if (easy_chat_utils_apiPINVOKE.SWIGPendingException.Pending) throw easy_chat_utils_apiPINVOKE.SWIGPendingException.Retrieve();
  }

  public string get_ip() {
    string ret = easy_chat_utils_apiPINVOKE.Connection_get_ip(swigCPtr);
    return ret;
  }

  public void set_ip(string ip) {
    easy_chat_utils_apiPINVOKE.Connection_set_ip(swigCPtr, ip);
    if (easy_chat_utils_apiPINVOKE.SWIGPendingException.Pending) throw easy_chat_utils_apiPINVOKE.SWIGPendingException.Retrieve();
  }

  public class Message_Not_Sent_Exception : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Message_Not_Sent_Exception(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Message_Not_Sent_Exception obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Message_Not_Sent_Exception() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            easy_chat_utils_apiPINVOKE.delete_Connection_Message_Not_Sent_Exception(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public Message_Not_Sent_Exception() : this(easy_chat_utils_apiPINVOKE.new_Connection_Message_Not_Sent_Exception(), true) {
    }
  
  }

}
