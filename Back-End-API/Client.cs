//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Client : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Client(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Client obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Client() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          easy_chat_client_apiPINVOKE.delete_Client(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Client(int port_number, string ip) : this(easy_chat_client_apiPINVOKE.new_Client(port_number, ip), true) {
    if (easy_chat_client_apiPINVOKE.SWIGPendingException.Pending) throw easy_chat_client_apiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void connect_and_auth(string username, string password) {
    easy_chat_client_apiPINVOKE.Client_connect_and_auth(swigCPtr, username, password);
    if (easy_chat_client_apiPINVOKE.SWIGPendingException.Pending) throw easy_chat_client_apiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void start_reciver() {
    easy_chat_client_apiPINVOKE.Client_start_reciver(swigCPtr);
  }

  public void sender() {
    easy_chat_client_apiPINVOKE.Client_sender(swigCPtr);
  }

  public string get_server_name() {
    string ret = easy_chat_client_apiPINVOKE.Client_get_server_name(swigCPtr);
    return ret;
  }

  public void set_server_name(string server_name) {
    easy_chat_client_apiPINVOKE.Client_set_server_name(swigCPtr, server_name);
    if (easy_chat_client_apiPINVOKE.SWIGPendingException.Pending) throw easy_chat_client_apiPINVOKE.SWIGPendingException.Retrieve();
  }

  public string recive_message() {
    string ret = easy_chat_client_apiPINVOKE.Client_recive_message(swigCPtr);
    return ret;
  }

  public void send_message(string message) {
    easy_chat_client_apiPINVOKE.Client_send_message(swigCPtr, message);
    if (easy_chat_client_apiPINVOKE.SWIGPendingException.Pending) throw easy_chat_client_apiPINVOKE.SWIGPendingException.Retrieve();
  }

}
